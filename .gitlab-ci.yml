.build-image: &build-image
  image: $CI_REGISTRY_IMAGE/php-fpm:latest
  services:
    - name: $CI_REGISTRY_IMAGE/percona:latest
      alias: mysql
    - name: $CI_REGISTRY_IMAGE/rabbitmq:latest
      alias: rabbitmq

.tests-image: &tests-image
  <<: *build-image
  dependencies:
    - build-sf-app
  before_script:
    - composer install -o

.build-before: &build-before
  stage: build-containers
  before_script:
    # docker login asks for the password to be passed through stdin for security
    # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - web/vendor/

variables:
  MYSQL_DATABASE: dbbezbahil
  MYSQL_USER: ubezbahil
  MYSQL_PASSWORD: BMnM@SNXiwz8
  MYSQL_ROOT_PASSWORD: yggem1991

build-fpm:
  <<: *build-before
  script:
    - source ./laradock/.env.test
    # fetches the latest image (not failing if image is not found)
    - 'docker pull $CI_REGISTRY_IMAGE/php-fpm:latest || true'
    - >
      docker build
      --pull
      --build-arg LARADOCK_PHP_VERSION=$PHP_VERSION
      --build-arg LARADOCK_PHALCON_VERSION=$PHALCON_VERSION
      --build-arg INSTALL_XDEBUG=$PHP_FPM_INSTALL_XDEBUG
      --build-arg INSTALL_PHPDBG=$PHP_FPM_INSTALL_PHPDBG
      --build-arg INSTALL_BLACKFIRE=$INSTALL_BLACKFIRE
      --build-arg INSTALL_SSH2=$PHP_FPM_INSTALL_SSH2
      --build-arg INSTALL_SOAP=$PHP_FPM_INSTALL_SOAP
      --build-arg INSTALL_IMAP=$PHP_FPM_INSTALL_IMAP
      --build-arg INSTALL_MONGO=$PHP_FPM_INSTALL_MONGO
      --build-arg INSTALL_AMQP=$PHP_FPM_INSTALL_AMQP
      --build-arg INSTALL_MSSQL=$PHP_FPM_INSTALL_MSSQL
      --build-arg INSTALL_ZIP_ARCHIVE=$PHP_FPM_INSTALL_ZIP_ARCHIVE
      --build-arg INSTALL_BCMATH=$PHP_FPM_INSTALL_BCMATH
      --build-arg INSTALL_GMP=$PHP_FPM_INSTALL_GMP
      --build-arg INSTALL_PHPREDIS=$PHP_FPM_INSTALL_PHPREDIS
      --build-arg INSTALL_MEMCACHED=$PHP_FPM_INSTALL_MEMCACHED
      --build-arg INSTALL_OPCACHE=$PHP_FPM_INSTALL_OPCACHE
      --build-arg INSTALL_EXIF=$PHP_FPM_INSTALL_EXIF
      --build-arg INSTALL_AEROSPIKE=$PHP_FPM_INSTALL_AEROSPIKE
      --build-arg AEROSPIKE_PHP_REPOSITORY=$AEROSPIKE_PHP_REPOSITORY
      --build-arg INSTALL_MYSQLI=$PHP_FPM_INSTALL_MYSQLI
      --build-arg INSTALL_PGSQL=$PHP_FPM_INSTALL_PGSQL
      --build-arg INSTALL_PG_CLIENT=$PHP_FPM_INSTALL_PG_CLIENT
      --build-arg INSTALL_TOKENIZER=$PHP_FPM_INSTALL_TOKENIZER
      --build-arg INSTALL_INTL=$PHP_FPM_INSTALL_INTL
      --build-arg INSTALL_GHOSTSCRIPT=$PHP_FPM_INSTALL_GHOSTSCRIPT
      --build-arg INSTALL_LDAP=$PHP_FPM_INSTALL_LDAP
      --build-arg INSTALL_PHALCON=$PHP_FPM_INSTALL_PHALCON
      --build-arg INSTALL_SWOOLE=$PHP_FPM_INSTALL_SWOOLE
      --build-arg INSTALL_IMAGE_OPTIMIZERS=$PHP_FPM_INSTALL_IMAGE_OPTIMIZERS
      --build-arg INSTALL_IMAGEMAGICK=$PHP_FPM_INSTALL_IMAGEMAGICK
      --build-arg INSTALL_CALENDAR=$PHP_FPM_INSTALL_CALENDAR
      --build-arg INSTALL_FAKETIME=$PHP_FPM_INSTALL_FAKETIME
      --build-arg INSTALL_IONCUBE=$PHP_FPM_INSTALL_IONCUBE
      --cache-from $CI_REGISTRY_IMAGE/php-fpm:latest
      --tag $CI_REGISTRY_IMAGE/php-fpm:latest
      ./laradock/php-fpm-symfony

    - 'docker push $CI_REGISTRY_IMAGE/php-fpm:latest'

build-percona:
  <<: *build-before
  script:
    - source ./laradock/.env.test
    # fetches the latest image (not failing if image is not found)
    - 'docker pull $CI_REGISTRY_IMAGE/percona:latest || true'
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/percona:latest
      --tag $CI_REGISTRY_IMAGE/percona:latest
      ./laradock/percona

    - 'docker push $CI_REGISTRY_IMAGE/percona:latest'

build-node:
  <<: *build-before
  script:
    - source ./laradock/.env.test
    # fetches the latest image (not failing if image is not found)
    - 'docker pull $CI_REGISTRY_IMAGE/node:latest || true'
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/node:latest
      --tag $CI_REGISTRY_IMAGE/node:latest
      ./laradock/nodejs

    - 'docker push $CI_REGISTRY_IMAGE/node:latest'


build-rabbitmq:
  <<: *build-before
  script:
    - source ./laradock/.env.test
    # fetches the latest image (not failing if image is not found)
    - 'docker pull $CI_REGISTRY_IMAGE/rabbitmq:latest || true'
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/rabbitmq:latest
      --tag $CI_REGISTRY_IMAGE/rabbitmq:latest
      ./laradock/rabbitmq

    - 'docker push $CI_REGISTRY_IMAGE/rabbitmq:latest'

build-deployer:
  <<: *build-before
  script:
    # - source ./laradock/.env.test
    # fetches the latest image (not failing if image is not found)
    - 'docker pull $CI_REGISTRY_IMAGE/deployer:latest || true'
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/deployer:latest
      --tag $CI_REGISTRY_IMAGE/deployer:latest
      ./docker/deployer

    - 'docker push $CI_REGISTRY_IMAGE/deployer:latest'
  only:
    - develop

build-assets:
  image: $CI_REGISTRY_IMAGE/node:latest
  stage: build-app
  script:
    - cd web
    - npm install
    - gulp
    - webpack
  artifacts:
    when: always
    paths:
      - web/local/templates/kdteam/js
      - web/local/templates/kdteam/styles
      - web/local/templates/kdteam/pages
      - web/dist

build-sf-app:
  <<: *build-image
  stage: build-app
  script:
    - composer install -o
    - cd web && composer install -o

phpunit:
  <<: *tests-image
  stage: test
  script:
    - source ./laradock/.env.test
    - cp .env.test .env
    - sh ci/phpunit.sh
  artifacts:
    when: always
    paths:
      - var/logs/phpunit-unit.xml
    reports:
      junit:
        - var/logs/phpunit-unit.xml

phpstan:
  <<: *tests-image
  stage: test
  script:
    - source ./laradock/.env.test
    - sh ci/phpstan.sh

#node-eslint:
#  stage: test
#  script:
#    # Configure ESLint (will read your .eslintrc file)
#    - eslint --init
#    # Run ESLint
#    - eslint <your_js_file>

deploy_staging:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/deployer
  dependencies:
    - build-deployer
    - build-sf-app
    - build-assets
  before_script:
    # https://docs.gitlab.com/ee/ci/ssh_keys/
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # https://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - echo "Host staging.aw-dev.ru\n\tPort 2222\n" > ~/.ssh/config
  script:
    - ls -la web/dist
    - dep deploy staging --tag=$CI_COMMIT_REF_NAME -vvv
  only:
    - develop

deploy_master:
  stage: deploy
  image: $CI_REGISTRY_IMAGE/deployer
  dependencies:
    - build-deployer
    - build-assets
  before_script:
    # https://docs.gitlab.com/ee/ci/ssh_keys/
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # https://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    #- echo "Host staging.aw-dev.ru\n\tPort 2222\n" > ~/.ssh/config
  script:
    - dep deploy prod --tag=$CI_COMMIT_REF_NAME -vvv
  only:
    - master


stages:
  - build-containers
  - build-app
  - test
  - deploy